run_id,experiment_id,status,artifact_uri,start_time,end_time,metrics.std_test_accuracy,metrics.std_test_custom_score,metrics.rank_test_best_threshold,metrics.std_test_main_score,metrics.rank_test_accuracy,metrics.mean_test_custom_loss,metrics.mean_test_f1,metrics.std_test_custom_loss,metrics.std_test_f1,metrics.rank_test_f1_best_thresh,metrics.mean_test_best_threshold,metrics.std_score_time,metrics.std_test_best_threshold,metrics.mean_test_main_score,metrics.mean_test_roc_auc,metrics.std_test_f1_best_thresh,metrics.rank_test_custom_loss,metrics.rank_test_main_score,metrics.std_test_roc_auc,metrics.mean_test_f1_best_thresh,metrics.rank_test_custom_score,metrics.mean_score_time,metrics.mean_test_custom_score,metrics.mean_fit_time,metrics.std_fit_time,metrics.mean_test_accuracy,metrics.rank_test_roc_auc,metrics.rank_test_f1,metrics.computing_duration,metrics.Xtest_roc_auc,metrics.Xtest_custom_loss,metrics.training_accuracy_score,metrics.Xtest_f1_score_bestthresh,metrics.Xtest_recall,metrics.cv_test_best_threshold,metrics.cv_test_f1,metrics.cv_test_custom_score,metrics.Xtest_best_threshold,metrics.cv_test_f1_best_thresh,metrics.cv_test_accuracy,metrics.training_roc_auc,metrics.training_f1_score,metrics.best_cv_score,metrics.Xtest_precision,metrics.training_recall_score,metrics.cv_test_roc_auc,metrics.cv_test_custom_loss,metrics.Xtest_accuracy,metrics.training_score,metrics.training_precision_score,metrics.Xtest_custom_score,metrics.Xtest_f1_score,metrics.cv_test_main_score,metrics.training_log_loss,params.verbose,params.SMOTE_under__sampling_strategy,params.Scaler__clip,params.memory,params.SMOTE_over__random_state,params.Model,params.Model__fit_intercept,params.Model__dual,params.Model__solver,params.Model__n_jobs,params.Model__random_state,params.SMOTE_over__n_jobs,params.Scaler__feature_range,params.Model__verbose,params.Model__class_weight,params.Model__tol,params.Model__l1_ratio,params.Model__C,params.Model__intercept_scaling,params.SMOTE_under__random_state,params.SMOTE_over,params.Model__penalty,params.Model__max_iter,params.SMOTE_under,params.steps,params.SMOTE_under__replacement,params.Model__warm_start,params.SMOTE_over__sampling_strategy,params.Scaler,params.Model__multi_class,params.Scaler__copy,params.SMOTE_over__k_neighbors,params.error_score,params.smote_version,params.best_Model__C,params.refit,params.cv,params.return_train_score,params.estimator,params.pre_dispatch,params.param_grid,params.scoring,params.n_jobs,tags.mlflow.parentRunId,tags.estimator_name,tags.mlflow.source.type,tags.mlflow.runName,tags.mlflow.autologging,tags.mlflow.user,tags.estimator_class,tags.mlflow.source.name,tags.mlflow.log-model.history
77380a5f2bed468db996614345b8e335,931964288462449467,FINISHED,s3://sp-mlflowbucket/931964288462449467/77380a5f2bed468db996614345b8e335/artifacts,2023-03-27 14:06:34.150000+00:00,2023-03-27 20:29:45.211000+00:00,,,,,,,,,,,,,,,,,,,,,,,,,,,,,1.3116105755170187,0.641575211437777,1374.0,0.7938666666666667,0.266046511627907,0.4951923076923077,0.40249175333544074,0.30024581875255973,0.4904,0.4108264545578416,0.2844764290789131,0.7870666666666667,0.7940759272727272,0.8331193313947488,-955.5,0.17487266553480477,0.7938666666666667,0.7563528263137549,-955.5,0.7636,-3462.0,0.9005178874753431,0.4504,0.2584692597239649,-955.5,0.46415162807887056,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,nan,version_3,0.03162277660168379,main_score,"StratifiedKFold(n_splits=4, random_state=42, shuffle=True)",False,"Pipeline(steps=[['SMOTE_over', SMOTE(random_state=42, sampling_strategy=0.5)],
                ['SMOTE_under',
                 RandomUnderSampler(random_state=42, sampling_strategy=0.75)],
                ['Scaler', MinMaxScaler()],
                ['Model', LogisticRegression(max_iter=2000)]])",2*n_jobs,"{'Model__C': array([1.00000000e-06, 7.94328235e-06, 6.30957344e-05, 5.01187234e-04,
       3.98107171e-03, 3.16227766e-02, 2.51188643e-01, 1.99526231e+00,
       1.58489319e+01, 1.25892541e+02, 1.00000000e+03])}","{'main_score': make_scorer(custom_loss_func, greater_is_better=False, needs_proba=True), 'accuracy': 'accuracy', 'roc_auc': 'roc_auc', 'f1': 'f1', 'f1_best_thresh': make_scorer(f1_best_thresh_func, needs_proba=True), 'custom_loss': make_scorer(custom_loss_func, greater_is_better=False, needs_proba=True), 'custom_score': make_scorer(custom_score_func, needs_proba=True), 'best_threshold': make_scorer(custom_loss_get_bestthreshold_func, needs_proba=True)}",6,,GridSearchCV,LOCAL,LogisticRegression,,Sam,sklearn.model_selection._search.GridSearchCV,C:\ProgramData\Miniconda3\lib\site-packages\ipykernel_launcher.py,"[{""run_id"": ""77380a5f2bed468db996614345b8e335"", ""artifact_path"": ""model"", ""utc_time_created"": ""2023-03-27 14:07:40.888130"", ""flavors"": {""python_function"": {""model_path"": ""model.pkl"", ""predict_fn"": ""predict"", ""loader_module"": ""mlflow.sklearn"", ""python_version"": ""3.10.9"", ""env"": {""conda"": ""conda.yaml"", ""virtualenv"": ""python_env.yaml""}}, ""sklearn"": {""pickled_model"": ""model.pkl"", ""sklearn_version"": ""1.2.1"", ""serialization_format"": ""cloudpickle"", ""code"": null}}, ""model_uuid"": ""d9a8240c840f4e6cb738b10a476afde3"", ""mlflow_version"": ""2.2.2"", ""signature"": {""inputs"": ""[{\""type\"": \""tensor\"", \""tensor-spec\"": {\""dtype\"": \""float32\"", \""shape\"": [-1, 280]}}]"", ""outputs"": ""[{\""type\"": \""tensor\"", \""tensor-spec\"": {\""dtype\"": \""float64\"", \""shape\"": [-1]}}]""}}, {""run_id"": ""77380a5f2bed468db996614345b8e335"", ""artifact_path"": ""best_estimator"", ""utc_time_created"": ""2023-03-27 14:07:45.700422"", ""flavors"": {""python_function"": {""model_path"": ""model.pkl"", ""predict_fn"": ""predict"", ""loader_module"": ""mlflow.sklearn"", ""python_version"": ""3.10.9"", ""env"": {""conda"": ""conda.yaml"", ""virtualenv"": ""python_env.yaml""}}, ""sklearn"": {""pickled_model"": ""model.pkl"", ""sklearn_version"": ""1.2.1"", ""serialization_format"": ""cloudpickle"", ""code"": null}}, ""model_uuid"": ""9587fbe2c4f545e095542bc32258aef6"", ""mlflow_version"": ""2.2.2"", ""signature"": {""inputs"": ""[{\""type\"": \""tensor\"", \""tensor-spec\"": {\""dtype\"": \""float32\"", \""shape\"": [-1, 280]}}]"", ""outputs"": ""[{\""type\"": \""tensor\"", \""tensor-spec\"": {\""dtype\"": \""float64\"", \""shape\"": [-1]}}]""}}]"
